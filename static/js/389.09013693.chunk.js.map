{"version":3,"file":"static/js/389.09013693.chunk.js","mappings":"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","sources":["components/Input/styled.js","components/InputName/styled.js","components/InputName/InputName.jsx","components/InputNumber/styled.js","components/InputNumber/InputNumber.jsx","components/ButtonAdd/Styled.js","Redux/contacts/filterReducer.js","Redux/contacts/selectors.js","components/ButtonAdd/ButtonAdd.jsx","components/Todo/styled.js","components/Todo/Todo.jsx","components/ContactList/styled.js","components/ContactList/ContactList.jsx","components/Input/Input.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ContactForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid black;\n  padding: 50px;\n\n`\nexport const H1 = styled.h1`\n  display: flex;\n  gap: 20px;\n  align-items: center;\n  justify-content: center;\n\n`\nexport const AddContact = styled.button`\n  cursor: pointer;\n`\nexport const Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  align-items: center;\n  justify-content: center;\n\n`","import styled from \"styled-components\"\n\nexport const InputAddName = styled.input`\n`","import { InputAddName } from \"./styled\";\n// import PropTypes from \"prop-types\";\n\nexport const InputName = ({handleNameChange, name}) => {\n\n    return (\n        <div>\n            <h2>Name</h2>\n            <InputAddName onChange={handleNameChange}\n                value={name}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[A-Za-z\\\\u0080-\\\\uFFFF '\\]+$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n            />\n        </div>\n    );\n};\n\n// InputName.propTypes = {\n//   handleNameChange: PropTypes.func.isRequired,\n//   name: PropTypes.string.isRequired,\n// };","import styled from \"styled-components\";\n\nexport const InputAddNumber = styled.input`\n`","import { InputAddNumber } from './styled'\n// import PropTypes from \"prop-types\";\n\nexport const InputNumber = ({handleNumberChange, phone}) => {\n\n    return (\n        <div>\n            <h2>Number</h2>\n            <InputAddNumber onChange={handleNumberChange}\n                value={phone}\n                type=\"tel\"\n                name=\"phone\"\n                pattern= \"^(\\\\+?[0-9.\\\\(\\\\)\\\\-\\\\s\\]*)$\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n            />\n        </div>\n    );\n};\n\n// InputNumber.propTypes = {\n//     handleNumberChange: PropTypes.func.isRequired,\n//     phone: PropTypes.string.isRequired,\n// };\n","import styled from \"styled-components\";\n\nexport const InputContacts = styled.input`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  align-items: center;\n  justify-content: center;\n`\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const filterSlice = createSlice({\n  name: \"filter\",\n  initialState: \"\",\n  reducers: {\n    setFilter: (state, action) => {\n      return action.payload;\n    },\n  },\n});\n\n\nexport const filterReducer = filterSlice.reducer;\nexport const { setFilter } = filterSlice.actions;\n\n","export const selectContacts = state => state.contacts.data;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const filters = (state) => {\n    const contacts = selectContacts(state);\n    const filter = selectFilter(state);\n    if(!contacts) return\n    return contacts.filter((item) =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n","import { InputContacts } from \"./Styled\";\n// import PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setFilter } from \"Redux/contacts/filterReducer\";\nimport { selectFilter } from \"Redux/contacts/selectors\";\n\n\nexport const Filter=()=> {\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n    \n      const handleChange = (e) => {\n    const { value } = e.target;\n    dispatch(setFilter(value))\n    };\n    \n        return (\n            <InputContacts value={filter} onChange={handleChange} />\n        );\n    }\n   \n// Filter.propTypes = {\n//     handleChange: PropTypes.func.isRequired,\n//     filter: PropTypes.string.isRequired,\n// };\n\n","import styled from \"styled-components\";\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  gap: 20px;\n  align-items: center;\n`;\n\nexport const Name = styled.h3`\n  font-size: 16px;\n  margin: 0;\n  line-height: 18px;\n`;\n\n\nexport const Number = styled.p`\n  font-size: 16px;\n  margin: 0;\n  line-height: 18px;\n`;\nexport const ButtonDel = styled.button`\n`","import { Number, Item, Name, ButtonDel } from \"./styled\";\n// import PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContacts } from \"Redux/contacts/operations\";\n\nexport const Todo = ({ id, name, phone}) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContacts(id));\n  };\n\n  return (\n    <ul>\n      <Item>\n        <Name>{name}</Name>\n        <Number>{phone}</Number>\n        <ButtonDel onClick={handleDelete}>Delete</ButtonDel>\n      </Item>\n    </ul>\n  );\n};\n\n// Todo.propTypes = {\n//   name: PropTypes.string.isRequired,\n//   phone: PropTypes.string.isRequired,\n// };","import styled from \"styled-components\";\n\nexport const List = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`","import { Todo } from \"components/Todo\"; \nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContacts } from \"Redux/contacts/operations\";\nimport { List } from \"./styled\";\n// import PropTypes from \"prop-types\";\nimport { selectContacts } from \"Redux/contacts/selectors\";\n\n\nexport const ContactList = () => {\n\n  const dispatch = useDispatch();\n    const filter = useSelector(selectContacts);\n\n  return (\n    <List>\n      {filter.map((item) => (\n        <Todo\n          {...item}\n          key={item.id}\n          onDelete={() => dispatch(deleteContacts(item.id))}\n        />\n      ))}\n    </List>\n  );\n};\n\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.oneOfType([\n//         PropTypes.number,\n//         PropTypes.string\n//       ]).isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ).isRequired,\n// };\n","import React, { useState} from \"react\";\nimport { AddContact, Section, H1, ContactForm } from \"./styled\";\nimport { InputName } from \"components/InputName\";\nimport { InputNumber } from \"components/InputNumber\";\nimport { Filter } from \"components/ButtonAdd\";\nimport { ContactList } from \"components/ContactList\"; \nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContacts } from \"Redux/contacts/operations\";\nimport { selectContacts } from \"Redux/contacts/selectors\";\n\nexport const Input = () => {\n\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  console.log(contacts);\n  \n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const handleNumberChange = (e) => {\n    setPhone(e.target.value);\n  };\n\n  const handleNameChange = (e) => {\n    setName(e.target.value);\n  };\n\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  const existingContact = contacts.find((contact) => {\n    \n    return contact.name.toLowerCase() === name.toLowerCase();\n  });\n  \n  if (existingContact) {\n    alert(`${name} is already in contacts.`);\n    return;\n  }\n\n  dispatch(addContacts({name, phone}));\n  setName('');\n  setPhone('');\n  \n};\n\n\n  return (\n    <Section>\n      <H1>Phonebook</H1>\n      <ContactForm onSubmit={handleSubmit}>\n        <InputName handleNameChange={handleNameChange} name={name} />\n        <InputNumber\n          handleNumberChange={handleNumberChange}\n          phone={phone}\n        />\n        <AddContact type=\"submit\">Add Contact</AddContact>\n      </ContactForm>\n      <h2>Contacts</h2>\n      <Filter/>\n      <ContactList />\n    </Section>\n  );\n};\n","import { Input } from \"components/Input\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"../Redux/contacts/operations\";\nimport { selectError, selectIsLoading } from \"../Redux/contacts/selectors\";\n\nconst Contacts = () => {\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && !error && <b>Request in progress...</b>}\n      {error && <p>{error}</p>}\n      {!error && <Input />}\n    </>\n  );\n};\nexport default Contacts;"],"names":["ContactForm","styled","H1","AddContact","Section","InputAddName","InputName","handleNameChange","name","onChange","value","type","pattern","title","required","InputAddNumber","InputNumber","handleNumberChange","phone","InputContacts","filterSlice","createSlice","initialState","reducers","setFilter","state","action","payload","reducer","actions","selectContacts","contacts","data","selectIsLoading","isLoading","selectError","error","selectFilter","filter","Filter","dispatch","useDispatch","useSelector","e","target","Item","Name","Number","ButtonDel","Todo","id","onClick","deleteContacts","List","ContactList","map","item","key","onDelete","Input","console","log","useState","setName","setPhone","onSubmit","preventDefault","find","contact","toLowerCase","alert","addContacts","useEffect","fetchContacts"],"sourceRoot":""}